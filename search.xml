<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue3+Ts+Vite的uniapp小程序项目中引入最新vant-weapp v1.11.2并且以后更新版本全部可用</title>
    <url>/posts/4b60898c/</url>
    <content><![CDATA[<h2 id="由于-vant-weapp-是针对微信小程序原生开发的使用在-uniapp-中并不能使用-npm-i-方式引入-vant-weapp，所以采用手动引入的方式"><a href="#由于-vant-weapp-是针对微信小程序原生开发的使用在-uniapp-中并不能使用-npm-i-方式引入-vant-weapp，所以采用手动引入的方式" class="headerlink" title="由于 vant-weapp 是针对微信小程序原生开发的使用在 uniapp 中并不能使用 npm i 方式引入 vant-weapp，所以采用手动引入的方式"></a>由于 vant-weapp 是针对微信小程序原生开发的使用在 uniapp 中并不能使用 npm i 方式引入 vant-weapp，所以采用手动引入的方式</h2><h2 id="1-下载vant-weapp包"><a href="#1-下载vant-weapp包" class="headerlink" title="1.下载vant-weapp包"></a>1.下载<a href="https://github.com/youzan/vant-weapp">vant-weapp</a>包</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用git下载</span></span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/youzan/vant-weapp.git</span></span><br><span class="line"><span class="comment">//也可以直接下载zip文件</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-在项目-src-文件里面创建wxcomponents将下载的-vant-weapp-文件打开将里面的-dist-文件复制粘贴到wxcomponents中并且重命名为-vant-这样更好识别"><a href="#2-在项目-src-文件里面创建wxcomponents将下载的-vant-weapp-文件打开将里面的-dist-文件复制粘贴到wxcomponents中并且重命名为-vant-这样更好识别" class="headerlink" title="2.在项目 src 文件里面创建wxcomponents将下载的 vant-weapp 文件打开将里面的 dist 文件复制粘贴到wxcomponents中并且重命名为 vant(这样更好识别)"></a>2.在项目 src 文件里面创建<code>wxcomponents</code>将下载的 vant-weapp 文件打开将里面的 dist 文件复制粘贴到<code>wxcomponents</code>中并且重命名为 vant(这样更好识别)</h2><hr>
<h2 id="3-打开-app-vue-文件在里添加-import-wxcomponents-vant-common-index-wxss"><a href="#3-打开-app-vue-文件在里添加-import-wxcomponents-vant-common-index-wxss" class="headerlink" title="3.打开 app.vue 文件在&lt;style lang=&quot;scss&quot;&gt;里添加@import &#39;@/wxcomponents/vant/common/index.wxss&#39;"></a>3.打开 app.vue 文件在<code>&lt;style lang=&quot;scss&quot;&gt;</code>里添加<code>@import &#39;@/wxcomponents/vant/common/index.wxss&#39;</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">  <span class="comment">//1.注意如果没有在vite为vue3配置@路径，请使用 2 @import</span></span><br><span class="line">  <span class="string">&#x27;@/wxcomponents/vant/common/index.wxss&#x27;</span> <span class="comment">//2.未配置配置@路径 @import</span></span><br><span class="line">  <span class="string">&#x27;/wxcomponents/vant/common/index.wxss&#x27;</span> ...省略</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-打开pages-json选择你是想全局还是局部引入"><a href="#4-打开pages-json选择你是想全局还是局部引入" class="headerlink" title="4.打开pages.json选择你是想全局还是局部引入"></a>4.打开<code>pages.json</code>选择你是想全局还是局部引入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.全局引入在globalStyle中创建usingComponents里面放你想引入的样式，？怎么知道样式怎么引入！打开wxcomponents/vant,该文件下选你想要的</span></span><br><span class="line"><span class="string">&quot;globalStyle&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">	...省略</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;van-button&quot;</span>: <span class="string">&quot;/wxcomponents/vant/button/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-cell&quot;</span>: <span class="string">&quot;/wxcomponents/vant/cell/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-cell-group&quot;</span>: <span class="string">&quot;/wxcomponents/vant/cell-group/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-icon&quot;</span>: <span class="string">&quot;/wxcomponents/vant/icon/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-image&quot;</span>: <span class="string">&quot;/wxcomponents/vant/image/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-row&quot;</span>: <span class="string">&quot;/wxcomponents/vant/row/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-col&quot;</span>: <span class="string">&quot;/wxcomponents/vant/col/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-popup&quot;</span>: <span class="string">&quot;/wxcomponents/vant/popup/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-toast&quot;</span>: <span class="string">&quot;/wxcomponents/vant/toast/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;van-card&quot;</span>: <span class="string">&quot;/wxcomponents/vant/card/index&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2.局部页面引入,以首页index引入&lt;van-button&gt;为例子</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;navigationStyle&quot;</span>: <span class="string">&quot;custom&quot;</span>, <span class="comment">// 隐藏默认导航</span></span><br><span class="line">        <span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;white&quot;</span>,</span><br><span class="line">        <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">            <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">			      <span class="string">&quot;van-button&quot;</span>: <span class="string">&quot;/wxcomponents/vant/button/index&quot;</span>,</span><br><span class="line">			    &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>uniapp</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Big_niuniu_项目信息</title>
    <url>/posts/47bdf3fa/</url>
    <content><![CDATA[<p><a name="urC1q"></a></p>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="使用七牛云存储、七牛视频相关产品-如视频截等-开发一款-Web-端短视频应用"><a href="#使用七牛云存储、七牛视频相关产品-如视频截等-开发一款-Web-端短视频应用" class="headerlink" title="使用七牛云存储、七牛视频相关产品 (如视频截等)开发一款 Web 端短视频应用"></a>使用七牛云存储、七牛视频相关产品 (如视频截等)开发一款 Web 端短视频应用</h3><h3 id="基础功能包括"><a href="#基础功能包括" class="headerlink" title="基础功能包括:"></a>基础功能包括:</h3><p>视频播放:播放、暂停、进度条拖拽<br />内容分类: 视频内容分类页，如热门视频、体育频道<br />视频切换: 可通过上下键翻石视频<br />同时你也可以加入更多高级功能，为你的应用加分! 高级功能包括:<br />账户系统: 用户可登录，收藏视频<br />推荐机制: 白动为用户推荐更多兴趣频道<br />互动功能: 点赞、分享、关注、搜索等<br />以及更多能够提升用户体验的功能!</p>
<p><a name="Yfs9n"></a></p>
<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>为什么想做这个项目？<br />比如现有的产品不能满足诉求（存在痛点）、或者目前没有类似的产品、或者出于其他目的。</p>
<p><a name="YlaZU"></a></p>
<h2 id="项目意义"><a href="#项目意义" class="headerlink" title="项目意义"></a>项目意义</h2><p>这个项目能解决什么问题？有什么实际意义？ <br />添加项目经验 <br />比如方便使用者、提升效率等。<br /></p>
<p><a name="tNUSn"></a></p>
<h2 id="核心亮点"><a href="#核心亮点" class="headerlink" title="核心亮点"></a>核心亮点</h2><p>没有完全为了尝试视频类型开发</p>
<p><a name="WOGNP"></a></p>
<h2 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h2><p>没有调研</p>
<p><a name="cRGZD"></a></p>
<h3 id="竞品分析"><a href="#竞品分析" class="headerlink" title="竞品分析"></a>竞品分析</h3><p>市场上有没有类似的项目？<br />你的项目和它们比有哪些异同（优缺点）？</p>
<p><a name="TbjgF"></a></p>
<h3 id="用户调研"><a href="#用户调研" class="headerlink" title="用户调研"></a>用户调研</h3><p>问一问其他同学的想法（投票、头脑风暴等）</p>
<p><a name="hcZ1D"></a></p>
<h3 id="结果总结"><a href="#结果总结" class="headerlink" title="结果总结"></a>结果总结</h3><p>说一说调研之后的心得感受，以及有了哪些新的项目思路。</p>
]]></content>
      <categories>
        <category>项目展示</category>
      </categories>
      <tags>
        <tag>web项目</tag>
      </tags>
  </entry>
  <entry>
    <title>框架的技术</title>
    <url>/posts/f988d2ff/</url>
    <content><![CDATA[<h1 id="框架的技术"><a href="#框架的技术" class="headerlink" title="框架的技术"></a>框架的技术</h1><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>面向切面编程</p>
<p>相关术语：</p>
<p>切入点（PointCut）：被标识为需要增强处理的连接点</p>
<p>连接点（JoinPoint）：指程序运行中的一些时间点（如方法调用或异常抛出）</p>
<p>切面（Aspect）：封装用于横向插入系统的功能（如事务、日志等）的类</p>
<p>通知&#x2F;增强处理（Advice）：指在切入点执行的增强处理代码，可以理解为切面类中的方法，是切面的具体实现</p>
<h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-编写切面类"><a href="#2-编写切面类" class="headerlink" title="2.编写切面类"></a>2.编写切面类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.example.service.UserService.save())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">strengthen</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//输出当前系统时间</span></span><br><span class="line">        System.out.println(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//执行原始方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="comment">//输出当前系统时间</span></span><br><span class="line">        System.out.println(LocalDateTime.now());</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-开启-AOP-功能支持"><a href="#3-开启-AOP-功能支持" class="headerlink" title="3.开启 AOP 功能支持"></a>3.开启 AOP 功能支持</h4><p>由于 spring-boot-starter-aop 依赖已经默认开启 AOP 支持，所以以下注解可加可不加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><h4 id="1-RestTemplate"><a href="#1-RestTemplate" class="headerlink" title="1.RestTemplate"></a>1.RestTemplate</h4><p>以下代码可加在配置类中或者加在启动类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于远程调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span>     <span class="comment">//负载均衡</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 RestTemplate 发送请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.pojo.User;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">//2.拼接访问另一个服务的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="comment">//3.使用restTemplate访问服务</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-http-客户端-Feign"><a href="#2-http-客户端-Feign" class="headerlink" title="2.http 客户端 Feign"></a>2.http 客户端 Feign</h4><h5 id="定义和使用-Feign"><a href="#定义和使用-Feign" class="headerlink" title="定义和使用 Feign"></a>定义和使用 Feign</h5><p>1.引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--开启Feign客户端依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2.在启动类上加注解@EnableFeignClients</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.编写 Feign 客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.clients;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Feign-的性能优化"><a href="#Feign-的性能优化" class="headerlink" title="Feign 的性能优化"></a>Feign 的性能优化</h5><p>Feign 底层的客户端实现：</p>
<p>1.URLConnection: 默认实现，不支持连接池</p>
<p>2.Apache HttpClient: 支持连接池</p>
<p>3.OKHttp: 支持连接池</p>
<p>优化 Feign 的性能主要包括：</p>
<p>1.使用连接池代替默认的 URLConnection</p>
<p>2.日志级别，最好使用 basic 或 none</p>
<p>Feign 添加 HttpClient 的支持</p>
<p>1.引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--引入HttpClient依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2.在 application.yml 中进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: <span class="literal">true</span>   #开启httpclient的开关</span><br><span class="line">    max-connections: <span class="number">200</span>     #最大连接数</span><br><span class="line">    max-connections-per-route: <span class="number">50</span>     #单个路径的最大连接数</span><br></pre></td></tr></table></figure>

<h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><h4 id="1-Eureka"><a href="#1-Eureka" class="headerlink" title="1.Eureka"></a>1.Eureka</h4><h5 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h5><p>需新建一个模块作为服务端并进行以下配置，同时将模块自身注册到 Eureka 中</p>
<p>pom.xml 引入以下依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--引入Eureka服务端依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>application.yml 进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:      #eureka的地址信息</span><br><span class="line">      defaultZone: http:<span class="comment">//127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<h5 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h5><p>新建其他模块并进行以下配置，将其他模块作为客户端并注册到 Eureka 中</p>
<p>pom.xml 引入以下依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--引入Eureka客户端依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>application.yml 进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:      #eureka的地址信息</span><br><span class="line">      defaultZone: http:<span class="comment">//127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<h4 id="2-Nacos"><a href="#2-Nacos" class="headerlink" title="2.Nacos"></a>2.Nacos</h4><h5 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h5><p>想要注册到 Nacos 中的服务进行以下配置</p>
<p>pom.xml 引入以下依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--引入Nacos客户端依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>application.yml 进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:<span class="number">8848</span>    #nacos客户端地址</span><br></pre></td></tr></table></figure>

<h5 id="服务多级存储模型"><a href="#服务多级存储模型" class="headerlink" title="服务多级存储模型"></a>服务多级存储模型</h5><p>服务 &gt; 集群 &gt; 实例</p>
<p>配置集群，集群名称可任意命名</p>
<p>application.yml 进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: GZ  #配置集群名称，这里GZ代表广州</span><br></pre></td></tr></table></figure>

<p>若想将同一个服务的不同实例运行在不同集群中，可以这样子做：</p>
<p>假如有服务 UserService，它有两个实例 UserService1 和 UserService2，这时可以先按上述配置运行 UserService1，然后更改配置，将上述集群名称改一下，改为 SH，然后再运行 UserService2，这时查看注册中心便能发现 UserService1 在集群 GZ 中，UserService2 在集群 SH 中</p>
<p>优先调用本地集群实例，在调用者服务的 application.yml 中进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#要做配置的服务名称，指定优先调用本地集群的实例</span><br><span class="line">userservice:</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule</span><br></pre></td></tr></table></figure>

<p>补充说明：若本地集群中没有可调用的实例，则会跨集群调用可用的实例</p>
<h5 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h5><h6 id="1-实现配置管理"><a href="#1-实现配置管理" class="headerlink" title="1.实现配置管理"></a>1.实现配置管理</h6><p>1.点击右上角的加号</p>
<p>2.填写配置信息</p>
<p>3.发布配置</p>
<h6 id="2-微服务配置拉取"><a href="#2-微服务配置拉取" class="headerlink" title="2.微服务配置拉取"></a>2.微服务配置拉取</h6><p>1.在 pom.xml 进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--引入Nacos配置管理依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2.在 resources 目录下创建 bootstrap.yml 文件，并进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: userservice</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev  #开发环境</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:<span class="number">8848</span></span><br><span class="line">      config:</span><br><span class="line">        file-extension: yaml  #文件后缀名</span><br></pre></td></tr></table></figure>

<p>补充说明：此配置对应 nacos 中 id 为 userservice-dev.yaml 的配置文件</p>
<h6 id="3-配置热更新"><a href="#3-配置热更新" class="headerlink" title="3.配置热更新"></a>3.配置热更新</h6><p>在控制器类上面加一个注解@RefreshScope</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="4-多环境配置共享"><a href="#4-多环境配置共享" class="headerlink" title="4.多环境配置共享"></a>4.多环境配置共享</h6><p>在 Nacos 中新建一个 userservice.yaml 配置文件，则当项目启动时无论处于哪种环境都会读取该配置文件</p>
<p>多种配置的优先级：</p>
<p>服务名-profile.yaml &gt; 服务名.yaml &gt; 本地配置</p>
<p>如：userservice-dev.yaml &gt; userservice.yaml &gt; application.yml</p>
<h3 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon 负载均衡"></a>Ribbon 负载均衡</h3><p>默认采用懒加载：即第一次访问时才会去创建 LoadBalanceClient，请求时间会很长<br>饥饿加载：在项目启动时创建 LoadBalanceClient，降低第一次访问的耗时</p>
<h4 id="饥饿加载配置"><a href="#饥饿加载配置" class="headerlink" title="饥饿加载配置"></a>饥饿加载配置</h4><p>在调用者服务的 application.yml 进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  eager-load:</span><br><span class="line">    enabled: <span class="literal">true</span>   #开启饥饿加载</span><br><span class="line">    clients:</span><br><span class="line">      - userservice    #指定进行饥饿加载的服务名称，可以填多个</span><br></pre></td></tr></table></figure>

<h3 id="统一网关-Gateway"><a href="#统一网关-Gateway" class="headerlink" title="统一网关 Gateway"></a>统一网关 Gateway</h3><h4 id="为什么需要网关"><a href="#为什么需要网关" class="headerlink" title="为什么需要网关"></a>为什么需要网关</h4><p>网关功能：</p>
<p>1.身份认证和权限校验</p>
<p>2.服务路由，负载均衡</p>
<p>3.请求限流</p>
<h4 id="搭建网关服务"><a href="#搭建网关服务" class="headerlink" title="搭建网关服务"></a>搭建网关服务</h4><p>1.创建新的模块，引入相关依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--引入nacos服务发现依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--引入gateway网关依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2.编写路由配置及 nacos 地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">10010</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:<span class="number">8848</span>     #nacos地址</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: user-service            #路由标识，必须唯一</span><br><span class="line">          uri: lb:<span class="comment">//userservice       #路由的目标地址，lb代表负载均衡</span></span><br><span class="line">          predicates:                 #路由断言，判断请求是否符合规则</span><br><span class="line">            - Path=/user<span class="comment">/**           #路由断言，判断请求路径是否以/user开头</span></span><br><span class="line"><span class="comment">        - id: order-service</span></span><br><span class="line"><span class="comment">          uri: lb://orderservice</span></span><br><span class="line"><span class="comment">          predicates:</span></span><br><span class="line"><span class="comment">            - Path=/order/**</span></span><br></pre></td></tr></table></figure>

<h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><p>过滤器示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(-1)</span>   <span class="comment">//指定过滤器的执行优先级，数字越小优先级越高</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取请求</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="comment">//2.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = request.getQueryParams();</span><br><span class="line">        <span class="comment">//3.从参数中获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="comment">//4.判断参数是否等于admin</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(auth))&#123;</span><br><span class="line">            <span class="comment">//5.如果是放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.如果不是，则拦截</span></span><br><span class="line">        <span class="comment">//6.1设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">//6.2拦截，请求结束</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤器执行顺序（路由过滤器，默认过滤器，全局过滤器）：</p>
<p>1.order 值越小，优先级越高</p>
<p>2.当 order 值一样时，顺序是默认过滤器最先，然后是局部的过滤器，最后是全局过滤器</p>
<h4 id="跨域问题处理"><a href="#跨域问题处理" class="headerlink" title="跨域问题处理"></a>跨域问题处理</h4><p>在 application.yml 中进行以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">	gateway:</span><br><span class="line">      globalcors:</span><br><span class="line">        add-to-simple-url-handler-mapping: <span class="literal">true</span></span><br><span class="line">        cors-configurations:</span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span>:</span><br><span class="line">            allowedOrigins:       # 允许哪些网站的跨域请求</span><br><span class="line">              - <span class="string">&quot;https://localhost:8090&quot;</span></span><br><span class="line">            allowedMethods:       # 允许的HTTP方法</span><br><span class="line">              - <span class="string">&quot;GET&quot;</span></span><br><span class="line">              - <span class="string">&quot;POST&quot;</span></span><br><span class="line">              - <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              - <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              - <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            allowedHeaders:       # 允许的HTTP头部信息</span><br><span class="line">              - <span class="string">&quot;*&quot;</span></span><br><span class="line">            allowCredentials: <span class="literal">true</span>   # 是否允许携带Cookie</span><br><span class="line">            maxAge: <span class="number">360000</span>        # 预检请求（OPTIONS请求）的缓存时间</span><br></pre></td></tr></table></figure>

<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="初识-Docker"><a href="#初识-Docker" class="headerlink" title="初识 Docker"></a>初识 Docker</h4><p>Docker 是一个快速交付应用，运行应用的技术：</p>
<p>1.可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意 Linux 操作系统</p>
<p>2.运行时利用沙箱机制形成隔离容器，各个应用互不干扰</p>
<p>3.启动、移除都可以通过一行命令完成，方便快捷</p>
<p>镜像：Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像</p>
<p>容器：镜像中的应用程序运行后形成的进程就是容器，只是 Docker 会给容器做隔离，对外不可见</p>
<p>Docker 架构：</p>
<p>服务端：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等</p>
<p>客户端：通过命令或 RestAPI 向 Docker 服务端发送指令，可以在本地或远程向服务端发送指令</p>
<h4 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h4><h5 id="1-镜像命令"><a href="#1-镜像命令" class="headerlink" title="1.镜像命令"></a>1.镜像命令</h5><p>docker pull 镜像名称 : 版本号 功能：从镜像服务器 DockerHub 拉取镜像</p>
<p>例：docker pull MySQL:5.7</p>
<p>补充：如果不加版本号则默认拉取最新版本的镜像</p>
<p>docker rmi 镜像名称 : 版本号&#x2F;镜像 ID 功能：从本地镜像中删除指定镜像</p>
<p>例：docker rmi MySQL : 5.7</p>
<p>docker images 功能：查看本地所有镜像</p>
<p>docker push 功能：向镜像服务器推送指定镜像</p>
<p>docker save 功能：将指定镜像导出到磁盘中</p>
<p>docker load 功能：从本地磁盘加载镜像到 Docker 中</p>
<p>补充：以上命令具体用法较多，可用 docker 操作名称 –help 查看具体用法及说明</p>
<p>例：docker push –help</p>
<h5 id="2-容器命令"><a href="#2-容器命令" class="headerlink" title="2.容器命令"></a>2.容器命令</h5><p>docker run 功能：运行容器</p>
<p>常见参数：</p>
<p>–name：指定容器名称</p>
<p>-p：指定端口映射</p>
<p>-d：让容器后台运行</p>
<p>常用：docker run –name 容器名称 -p 本地端口：容器端口 -d 镜像名称</p>
<p>例：docker run –name mn -p 80:80 -d nginx</p>
<p>docker pause 功能：将运行中的容器暂停</p>
<p>docker unpause 功能：将暂停中的容器恢复运行</p>
<p>docker stop 功能：将运行中的容器停止</p>
<p>docker start 功能：将停止中的容器恢复运行</p>
<p>docker ps 功能：查看所有运行的容器及状态</p>
<p>docker logs 功能：查看容器运行日志</p>
<p>docker exec 功能：进入容器执行命令</p>
<p>常用：docker exec -it 容器名称 bash</p>
<p>例：docker exec -it mn bash 进入容器并开启交互功能</p>
<h5 id="3-数据卷命令"><a href="#3-数据卷命令" class="headerlink" title="3.数据卷命令"></a>3.数据卷命令</h5><p>数据卷是一个虚拟目录，指向宿主机文件系统中的某个目录</p>
<p>数据卷的作用：将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</p>
<p>命令语法：docker volume 具体命令</p>
<p>docker volume create 功能：创建一个 volumn</p>
<p>docker volume inspect 功能：显示一个或多个 volumn 的信息</p>
<p>docker volume ls 功能：列出所有的 volumn</p>
<p>docker volume prune 功能：删除未使用的 volume</p>
<p>docker volume rm 功能：删除一个或多个指定的 volumn</p>
<p>将容器中的文件挂载到指定文件：</p>
<p>命令 : -v 数据卷名称：容器内目录</p>
<p>​ -v 宿主机文件：容器内文件</p>
<p>​ -v 宿主机目录：容器内目录</p>
<p>例：docker run –name mn -p 80:80 -v html:&#x2F;user&#x2F;share&#x2F;nginx&#x2F;html -d nginx</p>
<h4 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h4><h5 id="1-镜像结构"><a href="#1-镜像结构" class="headerlink" title="1.镜像结构"></a>1.镜像结构</h5><p>镜像是分层结构，每一层称为一个 Layer</p>
<p>BaseImage 层：包含基本的系统函数库、环境变量、文件系统</p>
<p>Entrypoint：入口，是镜像中应用启动的命令</p>
<p>其他：在 BaseImage 基础上添加依赖、安装程序、完成整个应用的安装和配置</p>
<h5 id="2-Dockerfile"><a href="#2-Dockerfile" class="headerlink" title="2.Dockerfile"></a>2.Dockerfile</h5><p>Dockerfile 是一个文本文件，其中包含一个个的指令，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer</p>
<p>常见指令：</p>
<p>指令 说明 示例</p>
<p>FROM 指定基础镜像 FROM centos:6</p>
<p>ENV 设置环境变量，可在后面指令使用 ENV key value</p>
<p>COPY 拷贝本地文件到镜像的指定目录 COPY .&#x2F;mysql-5.7.rpm &#x2F;tmp</p>
<p>RUN 执行 Linux 的 shell 命令，一般是安装过程的命令 RUN yum install gcc</p>
<p>EXPOSE 指定容器运行时监听的端口，是给镜像使用者看的 EXPOSE 8080</p>
<p>ENTRYPOINT 镜像中应用的启动命令，容器运行时调用 ENTRYPOINT java -jar xx.jar</p>
<h5 id="3-DockerCompose"><a href="#3-DockerCompose" class="headerlink" title="3.DockerCompose"></a>3.DockerCompose</h5><p>Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器</p>
<p>Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行</p>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>在 docker 容器内运行 RabbitMQ：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=root \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=root \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<p>端口 15672：作为 RabbitMQ 管理平台的入口</p>
<p>端口 5672：作为 RabbitMQ 消息发送的入口</p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>channel：通道，操作 MQ 的工具</p>
<p>exchange：交换机，路由消息到队列中</p>
<p>queue：队列，缓存消息</p>
<p>virtual host：虚拟主机，是对 queue、exchange 等资源的逻辑分组</p>
<h4 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h4><p>AMQP 是应用间消息通信的一种协议，与语言和平台无关</p>
<h5 id="1-简单队列模型"><a href="#1-简单队列模型" class="headerlink" title="1.简单队列模型"></a>1.简单队列模型</h5><p>特点：一条消息只能被一个消费者消费，当消息被消费后则从队列中删除</p>
<p>代码演示：</p>
<p>引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在生产者服务的 application.yml 中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.198</span><span class="number">.132</span>      #主机地址</span><br><span class="line">    port: <span class="number">5672</span>                 #端口</span><br><span class="line">    virtual-host: /            #虚拟主机</span><br><span class="line">    username: root             #用户名</span><br><span class="line">    password: root             #密码</span><br></pre></td></tr></table></figure>

<p>使用 RabbitTemplate 发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringAmqpSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在消费者服务的 application.yml 中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.198</span><span class="number">.132</span>      #主机地址</span><br><span class="line">    port: <span class="number">5672</span>                 #端口</span><br><span class="line">    virtual-host: /            #虚拟主机</span><br><span class="line">    username: root             #用户名</span><br><span class="line">    password: root             #密码</span><br></pre></td></tr></table></figure>

<p>消费消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringMQMessageListener</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到simple.queue的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-工作队列模型"><a href="#2-工作队列模型" class="headerlink" title="2.工作队列模型"></a>2.工作队列模型</h5><p>特点：一条消息只能被一个消费者消费，当消息被消费后则从队列中删除</p>
<p>Work queue：工作队列，可以提高消息处理速度，避免队列消息堆积</p>
<p>代码演示：</p>
<p>在生产者服务的 application.yml 中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.198</span><span class="number">.132</span>      #主机地址</span><br><span class="line">    port: <span class="number">5672</span>                 #端口</span><br><span class="line">    virtual-host: /            #虚拟主机</span><br><span class="line">    username: root             #用户名</span><br><span class="line">    password: root             #密码</span><br></pre></td></tr></table></figure>

<p>使用 RabbitTemplate 发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringAmqpWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,message__&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">            <span class="comment">//使线程休眠20ms，模拟1s发送50条消息</span></span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在消费者服务的 application.yml 中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.198</span><span class="number">.132</span>      #主机地址</span><br><span class="line">    port: <span class="number">5672</span>                 #端口</span><br><span class="line">    virtual-host: /            #虚拟主机</span><br><span class="line">    username: root             #用户名</span><br><span class="line">    password: root             #密码</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        prefetch: <span class="number">1</span>            #每次只能读取一条消息，处理后才能获取下一个消息</span><br></pre></td></tr></table></figure>

<p>消费消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringWorkQueue1Listener</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">        <span class="comment">//使线程休眠20ms，模拟1s处理50个消息</span></span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringWorkQueue2Listener</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;消费者2....接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">        <span class="comment">//使线程休眠200ms，模拟1s处理5个消息</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-发布订阅模型"><a href="#3-发布订阅模型" class="headerlink" title="3.发布订阅模型"></a>3.发布订阅模型</h5><p>特点：加入了交换机 exchange，允许将同一消息发送给多个消费者</p>
<p>常见交换机 exchange 类型包括：</p>
<p>Fanout：广播</p>
<p>Direct：路由</p>
<p>Topic：话题</p>
<p>注意：exchange 负责消息路由，而不是存储，路由失败则消息丢失</p>
<h6 id="1-Fanout-Exchange"><a href="#1-Fanout-Exchange" class="headerlink" title="1.Fanout Exchange"></a>1.Fanout Exchange</h6><p>Fanout Exchange 会将接收到的消息路由到每一个跟其绑定的 queue</p>
<p>代码演示：</p>
<p>在消费者服务配置交换机和队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列1</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将队列1绑定到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(fanoutQueue1)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列2</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将队列2绑定到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(fanoutQueue2)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在消费者服务编写以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FanoutQueue1Listener</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到fanout.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FanoutQueue2Listener</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到fanout.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在生产者服务编写以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendToFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">        <span class="comment">//消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,every one!&quot;</span>;</span><br><span class="line">        <span class="comment">//将消息发送到交换机</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-Direct-Exchange"><a href="#2-Direct-Exchange" class="headerlink" title="2.Direct Exchange"></a>2.Direct Exchange</h6><p>Direct Exchange 会将接收到的消息根据规则路由到指定的 Queue，因此称为路由模式（routes）</p>
<p>1.每一个 Queue 都与 Exchange 设置一个 BindingKey</p>
<p>2.发布者发送消息时，指定消息的 RoutingKey</p>
<p>3.Exchange 将消息路由到 BindingKey 与消息 RoutingKey 一致的队列</p>
<p>代码演示：</p>
<p>在消费者服务编写以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同时声明交换机与队列的绑定关系，并监听队列direct.queue1</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DirectQueue1Listener</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同时声明交换机与队列的绑定关系，并监听队列direct.queue2</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DirectQueue2Listener</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在生产者服务编写以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendToDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">        <span class="comment">//消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,red!&quot;</span>;</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-Topic-Exchange"><a href="#3-Topic-Exchange" class="headerlink" title="3.Topic Exchange"></a>3.Topic Exchange</h6><p>TopicExchange 与 DirectExchange 类似，区别在于 routingKey 必须是多个单词的列表，并且以 <strong>.</strong> 分割</p>
<p>Queue 与 Exchange 指定 BindingKey 时可以使用通配符：</p>
<p>#：代指 0 个或多个单词</p>
<p>*：代指一个单词</p>
<p>代码演示：</p>
<p>在消费者服务编写以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;china.#&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TopicQueue1Listener</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;#.news&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TopicQueue2Listener</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在生产者服务编写以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendToTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">        <span class="comment">//消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,china.news&quot;</span>;</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-消息转换器"><a href="#4-消息转换器" class="headerlink" title="4.消息转换器"></a>4.消息转换器</h5><p>Spring 对消息对象的处理是由 org.springframework.amqp.support.converter.MessageConverter 来处理的。而默认实现是 SimpleMessageConverter，基于 JDK 的 ObjectOutputStream 完成序列化。</p>
<p>上述默认序列化性能较差，因此改用 JSON 序列化器完成底层实现</p>
<p>代码演示：</p>
<p>在父工程引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>发送消息</p>
<p>在消费者服务中声明一个队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在生产者服务的启动类声明 Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PublisherApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试发送消息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class SpringAmqpTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testObjectMessage() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; msg = new HashMap&lt;&gt;();</span><br><span class="line">        msg.put(&quot;name&quot;, &quot;柳岩&quot;);</span><br><span class="line">        msg.put(&quot;age&quot;, 25);</span><br><span class="line">        rabbitTemplate.convertAndSend(&quot;object.queue&quot;, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收消息</p>
<p>在消费者服务的启动类声明 Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试接收消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ListenObjectQueue</span><span class="params">(Map&lt;String, Object&gt; msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到object.queue的消息：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="启动-Redis（Linux-系统）"><a href="#启动-Redis（Linux-系统）" class="headerlink" title="启动 Redis（Linux 系统）"></a>启动 Redis（Linux 系统）</h4><p>1、进入 redis 程序所在目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/bin</span><br></pre></td></tr></table></figure>

<p>2、以指定配置文件运行 redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server config/redis.conf</span><br></pre></td></tr></table></figure>

<p>3、连接 redis 客户端并指定端口为 6379</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6379</span><br></pre></td></tr></table></figure>

<h4 id="关闭-Redis"><a href="#关闭-Redis" class="headerlink" title="关闭 Redis"></a>关闭 Redis</h4><p>输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><p>1、切换数据库命令</p>
<p>redis 一共有 16 个数据库，默认使用第 0 个数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> index(数据库编号，从0开始)</span><br></pre></td></tr></table></figure>

<p>如：select 3 &#x3D;&gt; 切换到第 4 个数据库</p>
<p>2、查看所有的 key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<p>3、存值命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br></pre></td></tr></table></figure>

<p>如：set age 18 &#x3D;&gt; 存储一个 key 为 age，value 为 18 的数据</p>
<p>4、取值命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>

<p>如：get age &#x3D;&gt; 取出 key 为 age 的数据的值</p>
<p>5、查看数据库大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure>

<p>6、清空当前库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>

<p>7、清空所有库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure>

<h4 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h4><h5 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h5><p>基本命令</p>
<p>1、判断当前 key 是否存在，存在返回 1，不存在返回 0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure>

<p>如：exists name &#x3D;&gt; 判断是否存在 key 为 name 的数据</p>
<p>2、移除指定数据库的 key(index 从 1 开始)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">move key index</span><br></pre></td></tr></table></figure>

<p>如：move name 1 &#x3D;&gt; 从第一个数据库移除 key 为 name 的数据</p>
<p>3、设置 key 的过期时间(单位是秒)，过期后将找不到该数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expire key seconds</span><br></pre></td></tr></table></figure>

<p>如：expire name 10 &#x3D;&gt; 设置 name 的过期时间是 10 秒</p>
<p>4、查看 key 的剩余时间，显示-2 则表示已经过期</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ttl key</span><br></pre></td></tr></table></figure>

<p>如：ttl name &#x3D;&gt; 查看 name 的剩余时间还有多少</p>
<h5 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h5><p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> data hello            <span class="comment"># 设置值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get data                  <span class="comment"># 获取值</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; append data ,world        <span class="comment"># 追加字符串，若key不存在，则创建一个key</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get data</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen data               <span class="comment"># 获取key对应的值的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr views               <span class="comment"># 自增1，类似于i++</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr views               <span class="comment"># 自减1，类似于i--</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby views 10          <span class="comment"># 可以设置步长，指定增量为10</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decrby views 10          <span class="comment"># 可以设置步长，指定减值为10</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line"><span class="comment"># 字符串范围 range</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 hello,world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 4       <span class="comment"># 截取字符串，下标范围[0,4]</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 -1      <span class="comment"># 截取所有字符串，-1表示反方向第一个下标</span></span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符串</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> data hello,world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get data</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setrange data 6 zhangsan     <span class="comment"># 替换字符串，从下标6开始替换</span></span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">127.0.0.1:6379&gt; get data</span><br><span class="line"><span class="string">&quot;hello,zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setex key1 30 hello         <span class="comment"># 设置值并同时设置过期时间</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ttl key1</span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; setnx key2 world           <span class="comment"># 如果key不存在则创建key并设置值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx key2 hello           <span class="comment"># 如果key存在则创建失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3      <span class="comment"># 批量设置多个值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3               <span class="comment"># 批量获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4          <span class="comment"># 设置失败，msetnx是一个原子操作，要么同成功，要么同失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; getset data hello          <span class="comment"># 如果不存在值，返回nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> data hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getset data world          <span class="comment"># 如果存在值，先获取值再更新值</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get data</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br></pre></td></tr></table></figure>

<h5 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h5><p>所有命令都以 l 开头</p>
<p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">lpush</span><br><span class="line">rpush</span><br><span class="line">lrange</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush list one      <span class="comment"># 往列表头部中插入一个或多个值（左）</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1     <span class="comment"># 根据范围获取列表元素</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list four     <span class="comment"># 往列表尾部中插入一个或多个值（右）</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">lpop</span><br><span class="line">rpop</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list           <span class="comment"># 移除列表的第一个元素（左）</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list           <span class="comment"># 移除列表的最后一个元素（右）</span></span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">lindex</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 0       <span class="comment"># 获取列表的指定下标的元素</span></span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 1</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">llen</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lpush list four</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; llen list          <span class="comment"># 获取列表的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">lrem</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 four       <span class="comment"># 移除list中指定个数的值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 three     <span class="comment"># 移除list中2个three</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">ltrim</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpush list hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush list hello1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush list hello2</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpush list hello3</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2      <span class="comment"># 截取list中指定范围的元素，改变了list的数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">rpoplpush</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list list2     <span class="comment"># 将list中最后一个元素移除，并将该元素插入到list2中</span></span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">lset</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists list             <span class="comment"># 判断列表是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 hello       <span class="comment"># 列表不存在，报错</span></span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; rpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 three       <span class="comment"># 将列表中指定下标的元素替换为指定的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 2 four        <span class="comment"># 如果指定下标不存在，报错</span></span><br><span class="line">(error) ERR index out of range</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">linsert</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list before three four     <span class="comment"># 往列表指定元素的前面插入元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list after two one         <span class="comment"># 往列表指定元素的后面插入元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br></pre></td></tr></table></figure>

<h5 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h5><p>set 中的值是不能重复的！</p>
<p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">sadd</span><br><span class="line">smembers</span><br><span class="line">sismember</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello         <span class="comment"># 向集合中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset world</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset           <span class="comment"># 查看集合中的元素</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello    <span class="comment"># 查看集合中是否有指定元素，有返回1，没有返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset other</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">scard</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; scard myset             <span class="comment"># 获取集合中的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">srem</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srem myset one         <span class="comment"># 移除集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">srandmember</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset      <span class="comment"># 随机从集合中抽出一个元素</span></span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2    <span class="comment"># 随机从集合中抽出指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">spop</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; spop myset             <span class="comment"># 从集合中随机移除元素</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">smove</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 one     <span class="comment"># 将指定元素从第一个集合移动到第二个集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">sdiff</span><br><span class="line">sinter</span><br><span class="line">sunion</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers set1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;e&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff set1 set2            <span class="comment"># 差集，以第一个集合为准</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter set1 set2           <span class="comment"># 交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion set1 set2           <span class="comment"># 并集</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;d&quot;</span></span><br><span class="line">5) <span class="string">&quot;e&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br></pre></td></tr></table></figure>

<h5 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h5><p>存储的值是一个 Map 集合，key-Map 的结构 &#x3D;&gt; key-<key-value>，适合于对象存储</p>
<p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">hset</span><br><span class="line">hmset</span><br><span class="line">hdel</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field1 hello      <span class="comment"># 设置一个key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hset myhash field2 world</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash                <span class="comment"># 获取所有数据，以key-value顺序展示</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field3 one field4 two   <span class="comment"># 批量设值key-value</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">6) <span class="string">&quot;one&quot;</span></span><br><span class="line">7) <span class="string">&quot;field4&quot;</span></span><br><span class="line">8) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field4      <span class="comment"># 删除指定的key，对应的value也自动删除</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">6) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">hlen</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash     <span class="comment"># 获取key-value的数目</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">hexists</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field1      <span class="comment"># 判断指定字段是否存在，存在返回1，不存在返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field5</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">hkeys</span><br><span class="line">hvals</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash           <span class="comment"># 获得所有的字段</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;field2&quot;</span></span><br><span class="line">3) <span class="string">&quot;field3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash           <span class="comment"># 获得所有的值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">hsetnx         <span class="comment"># 如果字段不存在则设置</span></span><br><span class="line">hincrby</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field1 hello        <span class="comment"># 字段存在，设置失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field4 hello        <span class="comment"># 字段不存在，设置成功</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hset myhash field5 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field5 5          <span class="comment"># 设置字段增量</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br></pre></td></tr></table></figure>

<h5 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h5><p>在 set 的基础上，增加了一个值，set k1 v1 &#x3D;&gt; zset k1 score1 v1（score1 表示该元素的排位，用于排序元素）</p>
<p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">zadd</span><br><span class="line">zrange</span><br><span class="line">zrevrange</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 1 one         <span class="comment"># 增加一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 3 three</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1       <span class="comment"># 根据范围获取集合中的元素，从小到大</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange myzset 0 -1    <span class="comment"># 根据范围获取集合中的元素，从大到小</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">zrangebyscore</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 3000 zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 1000 lisi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2000 wangwu</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf     <span class="comment"># 根据分数升序显示范围在负无穷到正无穷的数据</span></span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span>                                <span class="comment"># 根据分数升序显示范围在负无穷到正无穷的数据，同时显示分数</span></span><br><span class="line">2) <span class="string">&quot;1000&quot;</span></span><br><span class="line">3) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">4) <span class="string">&quot;2000&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">6) <span class="string">&quot;3000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf 2000    <span class="comment"># 显示分数小于等于2000的数据，升序显示</span></span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">zrem</span><br><span class="line">zcard</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary wangwu          <span class="comment"># 从集合中移除指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary                <span class="comment"># 获取集合元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">zcount</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 1 one           <span class="comment"># 增加一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 3 three</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zcount myzset 1 3           <span class="comment"># 获取指定区间的元素数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount myzset 1 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br></pre></td></tr></table></figure>

<h4 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h4><h5 id="Geospatial（地理位置）"><a href="#Geospatial（地理位置）" class="headerlink" title="Geospatial（地理位置）"></a>Geospatial（地理位置）</h5><p>底层实现：Zset（有序集合）</p>
<p>应用场景：地图开发</p>
<p>常用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">geoadd    <span class="comment"># 添加地理位置（经度，纬度，城市名称），地球两极无法直接添加</span></span><br><span class="line">          <span class="comment"># 平常应用过程中一般会下载城市数据，通过Java程序一次性导入数据</span></span><br><span class="line"></span><br><span class="line">&gt; geoadd china:city 116 23 shantou</span><br><span class="line">1</span><br><span class="line">&gt; geoadd china:city 113 23 guangzou 114 22 shenzhen</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">geopos   <span class="comment"># 查看指定城市的经度纬度</span></span><br><span class="line"></span><br><span class="line">&gt; geopos china:city shantou</span><br><span class="line">116.00000113248825</span><br><span class="line">23.000000233894397</span><br><span class="line">&gt; geopos china:city guangzou</span><br><span class="line">112.99999862909317</span><br><span class="line">23.000000233894397</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">geodist       <span class="comment"># 查看两个城市之间的距离，最后面是距离单位，默认是m</span></span><br><span class="line">              <span class="comment"># 一共有4个单位，m(米),km(千米),mi(英里),ft(英尺)</span></span><br><span class="line"></span><br><span class="line">&gt; geodist china:city guangzou shantou km</span><br><span class="line">307.1479</span><br><span class="line">&gt; geodist china:city shenzhen shantou km</span><br><span class="line">233.6820</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">georadius    <span class="comment"># 以指定经纬度为中心，寻找指定半径内的城市</span></span><br><span class="line"></span><br><span class="line">&gt; georadius china:city 116 23 500 km</span><br><span class="line">shenzhen</span><br><span class="line">guangzou</span><br><span class="line">shantou</span><br><span class="line">&gt; georadius china:city 116 23 200 km</span><br><span class="line">shantou</span><br><span class="line">&gt; georadius china:city 116 23  500 km withdist      <span class="comment"># 输出找到的城市并同时输出距离</span></span><br><span class="line">shenzhen</span><br><span class="line">233.6819</span><br><span class="line">guangzou</span><br><span class="line">307.1478</span><br><span class="line">shantou</span><br><span class="line">0.0001</span><br><span class="line">&gt; georadius china:city 116 23  500 km withcoord     <span class="comment"># 输出找到的城市并同时输出经纬度</span></span><br><span class="line">shenzhen</span><br><span class="line">114.00000125169754</span><br><span class="line">21.999999507390832</span><br><span class="line">guangzou</span><br><span class="line">112.99999862909317</span><br><span class="line">23.000000233894397</span><br><span class="line">shantou</span><br><span class="line">116.00000113248825</span><br><span class="line">23.000000233894397</span><br><span class="line">&gt; georadius china:city 116 23  500 km count 1      <span class="comment"># 输出找到的指定数量的城市</span></span><br><span class="line">shantou</span><br><span class="line">&gt; georadius china:city 116 23  500 km count 2</span><br><span class="line">shantou</span><br><span class="line">shenzhen</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">georadiusbymember        <span class="comment"># 以指定城市为中心，寻找指定半径内的城市</span></span><br><span class="line"></span><br><span class="line">&gt; georadiusbymember china:city shantou 300 km</span><br><span class="line">shenzhen</span><br><span class="line">shantou</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">geohash                 <span class="comment"># 将指定城市的经纬度转化为11个字符的geohash字符串并返回</span></span><br><span class="line"></span><br><span class="line">&gt; geohash china:city shantou shenzhen</span><br><span class="line">ws46zeh8ey0</span><br><span class="line">wecj4hur290</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################################</span></span><br></pre></td></tr></table></figure>

<h5 id="Hyperloglog（基数统计）"><a href="#Hyperloglog（基数统计）" class="headerlink" title="Hyperloglog（基数统计）"></a>Hyperloglog（基数统计）</h5><p>什么是基数？&#x3D;&gt; 一个集合中不重复的元素的个数</p>
<p>Hyperloglog 的优点：无论统计多少个元素，占用的内存都是固定的（12KB）</p>
<p>应用场景：网站用户访问量的统计</p>
<p>常用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfadd</span><br><span class="line">pfcount</span><br><span class="line">pfmerge</span><br><span class="line"></span><br><span class="line">&gt; pfadd mykey a b c d e f g h i j           <span class="comment"># 往mykey中添加元素</span></span><br><span class="line">1</span><br><span class="line">&gt; pfadd mykey2 b d i j m n o p q</span><br><span class="line">1</span><br><span class="line">&gt; pfcount mykey                             <span class="comment"># 统计mykey中元素的个数（基数）</span></span><br><span class="line">10</span><br><span class="line">&gt; pfcount mykey2</span><br><span class="line">9</span><br><span class="line">&gt; pfmerge mykey3 mykey mykey2               <span class="comment"># 合并mykey和mykey2为mykey3，取并集</span></span><br><span class="line">OK</span><br><span class="line">&gt; pfcount mykey3</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<p>注意：Hyperloglog 有 0.81%的错误率</p>
<p>如果允许容错，则可以使用 Hyperloglog！</p>
<p>如果不允许容错，则可以使用 set 或自己的数据类型即可！</p>
<h5 id="Bitmap（位图）"><a href="#Bitmap（位图）" class="headerlink" title="Bitmap（位图）"></a>Bitmap（位图）</h5><p>原理：位存储，value 只能是 0 或 1，操作二进制数据来记录</p>
<p>应用场景：统计只有两种状态的数据，登录&#x2F;未登录，打开&#x2F;未打卡</p>
<p>常用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setbit</span><br><span class="line">getbit</span><br><span class="line">bitcount</span><br><span class="line"></span><br><span class="line">&gt; setbit sign 0 1                   <span class="comment"># 设置状态</span></span><br><span class="line">0                                   <span class="comment"># 0到6表示周一到周日，0/1表示未打卡/打卡</span></span><br><span class="line">&gt; setbit sign 1 0</span><br><span class="line">0</span><br><span class="line">&gt; setbit sign 2 0</span><br><span class="line">0</span><br><span class="line">&gt; setbit sign 3 0</span><br><span class="line">0</span><br><span class="line">&gt; setbit sign 4 1</span><br><span class="line">0</span><br><span class="line">&gt; setbit sign 5 0</span><br><span class="line">0</span><br><span class="line">&gt; setbit sign 6 1</span><br><span class="line">0</span><br><span class="line">&gt; getbit sign 0                     <span class="comment"># 获取状态</span></span><br><span class="line">1</span><br><span class="line">&gt; getbit sign 5</span><br><span class="line">0</span><br><span class="line">&gt; bitcount sign                     <span class="comment"># 统计状态为1的数据量</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>Redis 事务本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行的过程中，会按照顺序执行！</p>
<p>一次性、顺序性、排他性！执行一系列的命令！</p>
<p>&#x3D;&#x3D;Redis 事务没有隔离级别的概念！&#x3D;&#x3D;</p>
<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！&#x3D;&#x3D;Exec&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;Redis 单条命令是保证原子性的，但是 Redis 事务不保证原子性（同成功，同失败）！&#x3D;&#x3D;</p>
<p>redis 的事务：</p>
<ul>
<li><p>开启事务（multi）</p>
</li>
<li><p>命令入队（……）</p>
</li>
<li><p>执行事务（exec）</p>
</li>
</ul>
<blockquote>
<p>正常执行事务！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; multi                            <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">&gt; <span class="built_in">set</span> k1 v1                        <span class="comment"># 命令入队，此时命令只是入队，并没有执行</span></span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">exec</span>                             <span class="comment"># 执行事务，此时队列中的命令会顺序执行</span></span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">v2</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<blockquote>
<p>放弃事务！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; multi                           <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">&gt; discard                         <span class="comment"># 放弃事务，当事务放弃后，事务中的命令将作废</span></span><br><span class="line">OK</span><br><span class="line">&gt; get k3</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会被执行！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; multi                          <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">&gt; getset k3                      <span class="comment"># 语法错误的命令</span></span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">exec</span>                           <span class="comment"># 执行事务报错！所有的命令都不会被执行</span></span><br><span class="line">ReplyError: EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">&gt; get k4</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行时异常（1&#x2F;0），如果事务队列中存在语法性错误，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">&gt; multi                         <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">&gt; incr k1                       <span class="comment"># 语法正确的命令，但是运行会出问题，字符串不能做自增</span></span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">exec</span>                          <span class="comment"># 执行事务，第一条命令没有执行，其他命令都执行了</span></span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">&gt; get k3</span><br><span class="line">v3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>监控！Watch（面试常问）</p>
</blockquote>
<p><strong>悲观锁：</strong></p>
<ul>
<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>
</ul>
<p><strong>乐观锁：</strong></p>
<ul>
<li>很乐观，认为什么时候都不会出问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li>
<li>获取 version</li>
<li>更新的时候比较 version</li>
</ul>
<blockquote>
<p>Redis 监视测试</p>
</blockquote>
<p>正常执行成功！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money              <span class="comment"># 监视 money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi                    <span class="comment"># 事务正常结束，在此期间，没有其他线程修改money，这个时候                                            事务正常执行成功</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 90</span><br><span class="line">2) (<span class="built_in">integer</span>) 10</span><br></pre></td></tr></table></figure>

<p>测试多线程修改 money，使用 watch 可以当做 redis 的乐观锁操作（操作时再开一个窗口即可）！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money            <span class="comment"># 监视 money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span>    <span class="comment"># 执行事务之前，另外一个线程修改了money的值，这个时候，就会导致事务执行失                               败！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>如果修改失败，获取最新的值就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; unwatch               <span class="comment"># 如果数据修改失败，先停止对money的监视</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money           <span class="comment"># 重新监视money,得到最新数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span>              <span class="comment"># 比对监视的数据执行事务前是否有变化，如果没有变化则事务执行                                         成功，如果发生变化，则事务执行失败！</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 180</span><br><span class="line">2) (<span class="built_in">integer</span>) 30</span><br></pre></td></tr></table></figure>

<h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><blockquote>
<p>什么是 Jedis？Jedis 是 Redis 官方推荐的 Java 连接开发工具！使用 Jedis 操作 Redis 中间件！</p>
</blockquote>
<blockquote>
<p>测试</p>
</blockquote>
<p>1、导入对应的依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> &lt;!--导入Jedis的包--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.0</span><span class="number">.0</span>-beta2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、编码测试</p>
<blockquote>
<p>注意：Jedis 中的所有方法均对应着 redis 中的所有命令，包括名称也基本一样，因此掌握 redis 中的命令即可</p>
</blockquote>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//连接redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//测试连通性</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试字符串</span></span><br><span class="line">        jedis.set(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试列表</span></span><br><span class="line">        jedis.lpush(<span class="string">&quot;list&quot;</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">        System.out.println(jedis.lpop(<span class="string">&quot;list&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试集合</span></span><br><span class="line">        jedis.sadd(<span class="string">&quot;set&quot;</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(jedis.smembers(<span class="string">&quot;set&quot;</span>).toArray()));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试哈希</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;hset&quot;</span>, <span class="string">&quot;field1&quot;</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">        System.out.println(jedis.hget(<span class="string">&quot;hset&quot;</span>, <span class="string">&quot;field1&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试有序集合</span></span><br><span class="line">        jedis.zadd(<span class="string">&quot;mySet&quot;</span>, <span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;mySet&quot;</span>, <span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">        System.out.println(jedis.zrange(<span class="string">&quot;mySet&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Jedis 操作事务示例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//连接redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空数据库</span></span><br><span class="line">        jedis.flushDB();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加命令</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">            multi.set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">            multi.set(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">            <span class="comment">//执行事务</span></span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//放弃事务</span></span><br><span class="line">            multi.discard();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出命令</span></span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h4><blockquote>
<p>说明：在 SpringBoot 2.x 之后，原来的 Jedis 被替换为了 lettuce</p>
</blockquote>
<p>Jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的话，使用 Jedis pool 连接池！更像 BIO 模式</p>
<p>lettuce：采用 netty，实例可以在多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据，更像 NIO 模式</p>
<blockquote>
<p>Redis 自动配置类源码分析</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// 默认的redisTemplate没有过多的配置，而redis对象都是需要序列化的！</span></span><br><span class="line">    <span class="comment">// 两个泛型都是&lt;Object, Object&gt;，使用时需要转成&lt;String, Object&gt;</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于String类型是redis中常使用的类型，因此单独提出来了一个Bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> StringRedisTemplate <span class="title function_">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>(redisConnectionFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>整合测试</p>
</blockquote>
<p>1、导入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、配置 application.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    redis:</span><br><span class="line">        host: localhost</span><br><span class="line">        port: <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p>3、编码测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//opsForValue   操作字符串</span></span><br><span class="line">    <span class="comment">//opsForList    操作列表</span></span><br><span class="line">    <span class="comment">//opsForSet     操作集合</span></span><br><span class="line">    <span class="comment">//opsForHash    操作哈希</span></span><br><span class="line">    <span class="comment">//opsForZSet    操作有序集合</span></span><br><span class="line"></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他同理</span></span><br><span class="line">    <span class="comment">//redisTemplate.opsForList();</span></span><br><span class="line">    <span class="comment">//redisTemplate.opsForSet();</span></span><br><span class="line">    <span class="comment">//redisTemplate.opsForHash();</span></span><br><span class="line">    <span class="comment">//redisTemplate.opsForZSet();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接对象，可以进行数据库数据删除操作</span></span><br><span class="line">    <span class="type">RedisConnection</span> <span class="variable">connection</span> <span class="operator">=</span> redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    connection.flushDb();</span><br><span class="line">    <span class="comment">//connection.flushAll();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自定义 RedisTemplate 配置类</p>
</blockquote>
<p>配置 RedisTemplate 序列化方式（默认采用 jdk 提供的序列化方式，key 和 value 通常会出现乱码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplateBySelf</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置redis序列化方式</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RedisTemplate 工具类</p>
</blockquote>
<p>企业开发中一般不会使用原生的 RedisTemplate，而会使用再封装的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 RedisUtil 工具类测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        redisUtil.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;狂神&quot;</span>);</span><br><span class="line">        System.out.println(redisUtil.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Nginx 是什么 &#x3D;&gt; 高性能的、HTTP 和反向代理的 Web 服务器</p>
<h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><blockquote>
<p>正向代理</p>
</blockquote>
<p>在客户端配置代理服务器，通过代理服务器去访问因特网，这种行为称为正向代理</p>
<blockquote>
<p>反向代理</p>
</blockquote>
<ol>
<li>客户端不需要做任何配置</li>
<li>客户端将请求发送给反向代理服务器</li>
<li>反向代理服务器选择目标服务器获取数据，并返回给客户端</li>
<li>反向代理服务器和目标服务器对外就是一个服务器</li>
<li>暴露的是反向代理服务器的地址，而隐藏了真实服务器 IP 地址</li>
</ol>
<blockquote>
<p>负载均衡</p>
</blockquote>
<ol>
<li>系统收到大量请求时，单个服务器解决不了</li>
<li>增加服务器的数量</li>
<li>将请求分发到各个服务器（即将负载分到各个服务器）</li>
<li>使得各个服务器的请求量基本一致</li>
<li>降低单个服务器的压力</li>
</ol>
<blockquote>
<p>动静分离</p>
</blockquote>
<ol>
<li>原先我们可能会把动态资源（如：servlet）和静态资源（html,css,js）都部署到同一台服务器</li>
<li>为了加快解析速度，我们可以把动态资源和静态资源部署到不同的服务器</li>
<li>降低单个服务器的压力</li>
</ol>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>前提：先进入目录&#x2F;usr&#x2F;sbin</p>
<p>1.查看版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -v</span><br></pre></td></tr></table></figure>

<p>2.启动 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<p>3.关闭 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>

<p>4.重新加载 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>所在位置：&#x2F;etc&#x2F;nginx</p>
<p>名称：nginx.conf</p>
<p>nginx 配置文件主要由三部分组成</p>
<blockquote>
<p>全局块</p>
</blockquote>
<p>从配置文件开始到 events 块之间的内容，主要设置一些影响 Nginx 服务器整体运行的配置指令</p>
<p>如：<code>worker_processes 1;</code> &#x3D;&gt; 值越大，Nginx 可以支持的并发处理量越大</p>
<blockquote>
<p>events 块</p>
</blockquote>
<p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接</p>
<p>如：<code>worker_connections 1024</code> &#x3D;&gt; 表示支持的最大连接数</p>
<blockquote>
<p>http 块</p>
</blockquote>
<p>Nginx 服务器中配置最频繁的部分</p>
<p>可再分为</p>
<ol>
<li>http 全局块</li>
<li>server 块</li>
</ol>
<h4 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h4><p>1.配置反向代理</p>
<p>打开 nginx.conf 文件，在 location 中添加以下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass  IP地址;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.配置包含指定路径的反向代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ /user/ &#123;          <span class="comment"># 路径包含user则进行转发</span></span><br><span class="line">    proxy_pass  IP地址;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.配置负载均衡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    server   ip地址   <span class="comment"># 可以是同个IP不同端口</span></span><br><span class="line">    server   ip地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass  http://myserver;    <span class="comment"># 这里//后面的名称需与上面对应，可以任意取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务器分配策略"><a href="#服务器分配策略" class="headerlink" title="服务器分配策略"></a>服务器分配策略</h4><p>1.轮询（默认）</p>
<p>2.weight（权重，默认为 1） &#x3D;&gt; 根据每个服务器的权重来分配</p>
<p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    server   ip地址  weight=1    <span class="comment"># 可以是同个IP不同端口</span></span><br><span class="line">    server   ip地址  weight=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.ip_hash &#x3D;&gt; 根据访问 IP 的 hash 结果来分配</p>
<p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server   ip地址   <span class="comment"># 可以是同个IP不同端口</span></span><br><span class="line">    server   ip地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.fair（第三方）&#x3D;&gt; 根据后端服务器的响应时间来分配</p>
<p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    server   ip地址   <span class="comment"># 可以是同个IP不同端口</span></span><br><span class="line">    server   ip地址</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>内部实现：master + worker</p>
<p>master：管理者，只有一个</p>
<p>worker：实际工作者，有多个</p>
<p>工作机制：</p>
<p>客户端请求首先到达 master，然后 master 通知 worker 有请求到达，然后多个 worker 通过争抢的方式去抢夺请求，抢到的 worker 则接着执行请求的一系列流程。</p>
<blockquote>
<p>设置多少个 worker 合适</p>
</blockquote>
<p>worker 的数量设置等于 CPU 数最好</p>
<blockquote>
<p>一个 master + 多个 worker 的好处</p>
</blockquote>
<p>1.可以使用<code>nginx -s reload</code>热部署，利于 nginx 进行热部署操作</p>
<p>2.每个 worker 是独立的进程，当一个 worker 出现问题时，其他 worker 可继续参与争抢，实现请求过程，不会造成服务中断</p>
<blockquote>
<p>worker 支持的最大并发数有多少</p>
</blockquote>
<p>1.如果每个请求都是静态请求，不需要访问数据库，则 worker 支持的最大并发数为 <strong>worker 的最大连接数&#x2F;2</strong></p>
<p>2.如果每个请求需要访问数据库，则 worker 支持的最大并发数为 <strong>worker 的最大连接数&#x2F;4</strong></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java框架</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣周记-24-9-7</title>
    <url>/posts/ed39242/</url>
    <content><![CDATA[<h2 id="258-各位相加"><a href="#258-各位相加" class="headerlink" title="258. 各位相加"></a><a href="https://leetcode.cn/problems/add-digits/">258. 各位相加</a></h2><p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: num = 38</span><br><span class="line">输出: 2</span><br><span class="line">解释: 各位相加的过程为：</span><br><span class="line">38 --&gt; 3 + 8 --&gt; 11</span><br><span class="line">11 --&gt; 1 + 1 --&gt; 2</span><br><span class="line">由于 2 是一位数，所以返回 2。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: num = 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= num &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你可以不使用循环或者递归，在 <code>O(1)</code> 时间复杂度内解决这个问题吗？</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>能够被 9 整除的整数，各位上的数字加起来也必然能被 9 整除，所以，连续累加起来，最终必然就是 9。<ul>
<li><code> 81 - 8 + 1 - 9、99 — 9 + 9 - 18 - 1 + 8 - 9 即 X%9 == 0 return 9</code></li>
</ul>
</li>
<li>不能被 9 整除的整数，各位上的数字加起来，结果对 9 取模，和初始数对 9 取摸，是一样的，所以，连续累加起来，最终必然就是初始数对 9 取摸。<ul>
<li><code>37 - 3 + 7 - 10 - 1 + 0 - 1  即 x%9 != 0 return x%9</code></li>
</ul>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>没简化</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addDigits</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">9</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num % <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># <span class="number">2.</span>简化</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addDigits</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (num - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="1281-整数的各位积和之差"><a href="#1281-整数的各位积和之差" class="headerlink" title="1281. 整数的各位积和之差"></a><a href="https://leetcode.cn/problems/subtract-the-product-and-sum-of-digits-of-an-integer/">1281. 整数的各位积和之差</a></h2><p>给你一个整数 <code>n</code>，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 234</span><br><span class="line">输出：15</span><br><span class="line">解释：</span><br><span class="line">各位数之积 = 2 * 3 * 4 = 24</span><br><span class="line">各位数之和 = 2 + 3 + 4 = 9</span><br><span class="line">结果 = 24 - 9 = 15</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4421</span><br><span class="line">输出：21</span><br><span class="line">解释：</span><br><span class="line">各位数之积 = 4 * 4 * 2 * 1 = 32</span><br><span class="line">各位数之和 = 4 + 4 + 2 + 1 = 11</span><br><span class="line">结果 = 32 - 11 = 21</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
</ul>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>我们只需要依次取出数字 n 中的各位数字，并计算各个数字的乘积 amass 以及数字和 add，最后返回 amass−add 即可。</p>
<p>我们可以依次取出 n 的最低位来得到 n 的各位数字：</p>
<p>通过「取模」操作 n%10 得到此时 n 的最低位。<br>通过「整除」操作 n&#x3D;⌊ n&#x2F;10 ⌋ 来去掉当前 n 的最低位。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int subtractProductAndSum(int n) &#123;</span><br><span class="line">        int amass=1,add=0;</span><br><span class="line">        while (n != 0) &#123;</span><br><span class="line">            int l = n % 10;</span><br><span class="line">            amass *= l;</span><br><span class="line">            add += l;</span><br><span class="line">            n /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return amass - add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="231-2-的幂"><a href="#231-2-的幂" class="headerlink" title="231. 2 的幂"></a><a href="https://leetcode.cn/problems/power-of-two/">231. 2 的幂</a></h3><p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>如果存在一个整数 <code>x</code> 使得 <code>n == 2x</code> ，则认为 <code>n</code> 是 2 的幂次方。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：20 = 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 16</span><br><span class="line">输出：true</span><br><span class="line">解释：24 = 16</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能够不使用循环&#x2F;递归解决此问题吗？</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>若 n&#x3D;2^x</p>
<p>且 x 为自然数（即 n 为 2 的幂），则一定满足以下条件：</p>
<p>恒有 n &amp; (n - 1) &#x3D;&#x3D; 0，这是因为：</p>
<ul>
<li><p>n 二进制最高位为 1，其余所有位为 0；</p>
</li>
<li><p>n−1 二进制最高位为 0，其余所有位为 1；</p>
</li>
</ul>
<p>一定满足 n &gt; 0。<br>因此，通过 n &gt; 0 且 n &amp; (n - 1) &#x3D;&#x3D; 0 即可判定是否满足 n&#x3D;2^x。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="326-3-的幂"><a href="#326-3-的幂" class="headerlink" title="326. 3 的幂"></a><a href="https://leetcode.cn/problems/power-of-three/">326. 3 的幂</a></h3><p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>整数 <code>n</code> 是 3 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 3x</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 27</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 0</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 9</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 45</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能不使用循环或者递归来完成本题吗？</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>做法是将 <em>n</em> 对 3 进行试除，直到 <em>n</em> 不再与 3 呈倍数关系，最后判断 <em>n</em> 是否为 30&#x3D;1 即可。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">          n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣周记</tag>
      </tags>
  </entry>
  <entry>
    <title>低成本创业-1</title>
    <url>/posts/80026efd/</url>
    <content><![CDATA[<h2 id="为什么要低成本创业"><a href="#为什么要低成本创业" class="headerlink" title="为什么要低成本创业"></a>为什么要低成本创业</h2><p><strong>创业者找 VC 商量能不能投资我?VC 一看，你这个项目有点早，用户需求和解决方案都没验证，你再跑一跑再找我</strong></p>
<p>一般创始人都觉得自己很委屈：因为钱不够，无法验证业务；没法验证业务，就更拿不到钱了，这就陷入了一个更大的死循环。</p>
<p>复盘一下业务方案，往往发现多数的效率都很低，”常常做的冗余不堪，甚至很多人还在用着 20 多年前”软件工程”里的老方法，用最原始的方法创业。</p>
<p><strong>比如下面两个例子：</strong></p>
<ul>
<li><p>两个创始人验证同一个项目，比如都做 1 对 N 的线上编程小班课。第一个创业者，可能用了 300 万和 1 年多的时间，一直打磨产品和开发还没正式上线，一个订单都没拿到。</p>
</li>
<li><p>而另一个团队，同样 300 万，1 年时间已经尝试了 5 个产品模式，每个方案质量都很高，不断试错，不断转型，最后能让一个项目跑出来，成功融了一大笔钱。</p>
</li>
</ul>
<h3 id="验证一个-idea-可行性，需要-300-万？30-万？3-万？"><a href="#验证一个-idea-可行性，需要-300-万？30-万？3-万？" class="headerlink" title="验证一个 idea 可行性，需要 300 万？30 万？3 万？"></a>验证一个 idea 可行性，需要 300 万？30 万？3 万？</h3><p>大家看，验证同一个 idea，不同人操盘，可能是 300 万和 30 万的区别，甚至有的人，花 3 万块钱就能验证</p>
<p><strong>预热思考</strong></p>
<p><strong>第一个题目是个案例设计题。</strong></p>
<p>国外共享滑板项目很火，你可以理解为是一种新的摩拜单车，只是把自行车换成了电动滑板。国外这个项目最近融了一大笔钱，你觉得国内一定也能做，所以想立刻创业。</p>
<p>好，问题来了:如果你有 300 万启动资金，你打算怎么启动这个项目?进一步说，如果你只有 10 万，想验证一下这个项目，可以搞定吗?</p>
<p>这个题目非常有意思，很考验大家的验证能力，你可以想一想，你会怎么做?</p>
<p><strong>第二个思考题是业务复盘题。</strong></p>
<p>大家要思考:你现在的业务模式跑通了吗?如果是，你都验证了哪些部分?如果还没有，那还差哪些没有验证?下一步打算如何验证它，你有没有一些方法，可以大幅降低你验证的成本?</p>
<p><strong>希望大家停下来认真想想，带着问题学习，听完这节课，相信你对这两个问题，会有一个全新的理解。</strong></p>
<p><strong>低成本创业内容的三个重点：</strong></p>
<ul>
<li>解读浪费</li>
<li>理解原则</li>
<li>实操方法</li>
</ul>
<p>后面的内容将会继续补充…</p>
]]></content>
      <categories>
        <category>MBA</category>
      </categories>
      <tags>
        <tag>创业</tag>
      </tags>
  </entry>
  <entry>
    <title>解决windows下elasticsearch默认占用内存过大问题</title>
    <url>/posts/c48a5e72/</url>
    <content><![CDATA[<h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法 1"></a>解决方法 1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">##<span class="number">1.</span>修改jvm.options文件 目录为 es/config/jvm.options</span><br><span class="line"></span><br><span class="line">##<span class="number">2.</span>使用文本编译器打开jvm.options</span><br><span class="line">##<span class="number">3.</span>找到 IMPORTANT: JVM heap size</span><br><span class="line">## IMPORTANT: JVM heap size</span><br><span class="line">##<span class="number">4.</span>去掉  -Xms4g 前面的 ## 注释</span><br><span class="line">## -Xms4g</span><br><span class="line">## -Xmx4g</span><br><span class="line">##修改后</span><br><span class="line">-Xms4g #JVM启动时的初始堆内存大小为4GB，具体大小可以按自己需求设置</span><br><span class="line">-Xmx4g #JVM可以使用的最大堆内存大小为4GB，具体大小可以按自己需求设置</span><br><span class="line"></span><br><span class="line">##保存并重启 es</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法 2"></a>解决方法 2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">##去掉 elasticsearch.yml 里的#注释</span><br><span class="line"></span><br><span class="line">#bootstrap.memory_lock: <span class="literal">true</span></span><br><span class="line">##配置，修改后</span><br><span class="line">bootstrap.memory_lock: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">##保存并重启es</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch中DevTools的CRUD和常见规则语句</title>
    <url>/posts/67e1a025/</url>
    <content><![CDATA[<h2 id="本文章全程使用-elasticsearch-的-DLS-语法"><a href="#本文章全程使用-elasticsearch-的-DLS-语法" class="headerlink" title="本文章全程使用 elasticsearch 的 DLS 语法"></a>本文章全程使用 elasticsearch 的 DLS 语法</h2><h3 id="一-常见-CRUD-语句"><a href="#一-常见-CRUD-语句" class="headerlink" title="一.常见 CRUD 语句"></a>一.常见 CRUD 语句</h3><h3 id="1-创建（索引文档）"><a href="#1-创建（索引文档）" class="headerlink" title="1. 创建（索引文档）"></a>1. <strong>创建（索引文档）</strong></h3><p>在创建文档时，你可以包含元数据和字段来定义安全级别：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /&lt;index&gt;/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;security_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;internal&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是一个内部文档。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-读取（带有-DLS-的搜索）"><a href="#2-读取（带有-DLS-的搜索）" class="headerlink" title="2. 读取（带有 DLS 的搜索）"></a>2. <strong>读取（带有 DLS 的搜索）</strong></h3><p>为了读取带有 DLS 的文档，你可以在角色中配置 DLS 查询。例如，拥有“内部”角色的用户只能查看标记为 <code>security_level: internal</code> 的文档。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /&lt;index&gt;/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;security_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;internal&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以在 Elasticsearch 的角色定义中应用 DLS。以下是一个带有 DLS 的角色定义示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /_security/role/internal_user</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;indices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;&lt;index&gt;&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;privileges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;read&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;security_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;internal&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-更新（修改文档）"><a href="#3-更新（修改文档）" class="headerlink" title="3. 更新（修改文档）"></a>3. <strong>更新（修改文档）</strong></h3><p>如果用户有访问权限，可以使用文档 ID 来更新特定字段，同时保持对 <code>security_level</code> 的访问控制。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /&lt;index&gt;/_update/&lt;document_id&gt;</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;更新后的内部文档内容。&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-删除（删除文档）"><a href="#4-删除（删除文档）" class="headerlink" title="4. 删除（删除文档）"></a>4. <strong>删除（删除文档）</strong></h3><p>对于删除操作，确保用户具有适当的角色，并且查询应用了正确的 <code>security_level</code>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /&lt;index&gt;/_doc/&lt;document_id&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-常见搜索规则"><a href="#2-常见搜索规则" class="headerlink" title="2.常见搜索规则"></a>2.常见搜索规则</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">##修改数据</span><br><span class="line">POST post/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zt的描述&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">##根据_id查询数据</span><br><span class="line"></span><br><span class="line">GET post/_doc/<span class="number">1</span>c1FFJIBLxkM6xpy_qpH</span><br><span class="line"></span><br><span class="line">##查询所有</span><br><span class="line">GET post/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">##删除</span><br><span class="line">DELETE /post</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##查看索引结构</span><br><span class="line">GET post/_mapping</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 使用SQL查询</span><br><span class="line">POST /_sql?format=txt</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SELECT * FROM post WHERE title LIKE &#x27;%ZT%&#x27; &quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">##空格分词器</span><br><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好欢迎来到ecs&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">##建索引，初始化分词和搜索规则</span><br><span class="line">PUT post_v1</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isDelete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">##查询java段新增的数据</span><br><span class="line">GET post/_search</span><br><span class="line"></span><br><span class="line">##查询---match(模糊查询)---term(精确查询)---regexp(正则表达式查询)</span><br><span class="line">GET post_v1/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;知识优加&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka学习笔记1</title>
    <url>/posts/ab414b1a/</url>
    <content><![CDATA[<h2 id="1-Kafka-是什么"><a href="#1-Kafka-是什么" class="headerlink" title="1.Kafka 是什么?"></a>1.Kafka 是什么?</h2><p><strong>Kafka</strong>是 Apache 开源的一款基于<strong>zookeeper</strong>协调的分布式消息系统，具有高吞吐率、高性能、实时、高可靠等特点，可实时处理流式数据。它最初由 LinkedIn 公司开发，使用<strong>Scala</strong>语言编写。</p>
<p><strong>Kafka</strong>历经数年的发展，从最初纯粹的消息引擎，到近几年开始在流处理平台生态圈发力，多个组织或公司发布了各种不同特性的产品。</p>
<h2 id="2-Kafka-能干嘛"><a href="#2-Kafka-能干嘛" class="headerlink" title="2.Kafka 能干嘛?"></a>2.Kafka 能干嘛?</h2><p><strong>Kafka 特点</strong></p>
<ul>
<li>高吞吐量、低延迟：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息，它的延迟最低只有几毫秒</li>
<li>持久性：支持消息持久化，即使数 TB 级别的消息也能够保持长时间的稳定性能。</li>
<li>可靠性：支持数据备份防止丢失</li>
<li>容错性：支持通过 Kafka 服务器和消费机集群来分区消息，允许集群中的节点失败（若分区副本数量为 n，则允许 n-1 个节点失败）</li>
<li>高并发：单机可支持数千个客户端同时读写，支持在线水平扩展。可无缝对接 hadoop、strom、spark 等，支持 Hadoop 并行数据加载</li>
</ul>
<h2 id="3-Kafka-常用于？"><a href="#3-Kafka-常用于？" class="headerlink" title="3.Kafka 常用于？"></a>3.Kafka 常用于？</h2><table>
<thead>
<tr>
<th>ID</th>
<th>设计目标</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>日志收集</td>
<td>一个公司可以用 Kafka 可以收集各种服务的 Log，通过 Kafka 以统一接口服务的方式开放给各种 Consumer</td>
</tr>
<tr>
<td>2</td>
<td>消息系统</td>
<td>解耦生产者和消费者、缓存消息等</td>
</tr>
<tr>
<td>3</td>
<td>用户活动跟踪</td>
<td>用来记录 web 用户或者 APP 用户的各种活动，如网页搜索、搜索、点击，用户数据收集然后进行用户行为分析。</td>
</tr>
<tr>
<td>4</td>
<td>运营指标</td>
<td>Kafka 也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告</td>
</tr>
<tr>
<td>5</td>
<td>流式处理</td>
<td>比如 Spark Streaming 和 Storm</td>
</tr>
</tbody></table>
<h2 id="4-Kafka-集群机制"><a href="#4-Kafka-集群机制" class="headerlink" title="4.Kafka 集群机制"></a>4.Kafka 集群机制</h2><ul>
<li>Kafka 是天然支持集群的，哪怕是一个节点实际上也是集群模式</li>
<li>Kafka 集群依赖于 Zookeeper 进行协调，并且在早期的 Kafka 版本中很多数据都是存放在 Zookeeper 的</li>
<li>Kafka 节点只要注册到同一个 Zookeeper 上就代表它们是同一个集群的</li>
<li>Kafka 通过 brokerId 来区分集群中的不同节点</li>
</ul>
<h2 id="5-Kafka-基础架构和术语名词"><a href="#5-Kafka-基础架构和术语名词" class="headerlink" title="5.Kafka 基础架构和术语名词"></a>5.Kafka 基础架构和术语名词</h2><p><img src="/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1728636455352.png" alt="1728636455352"></p>
<table>
<thead>
<tr>
<th><strong>核心组件</strong></th>
<th><strong>概念</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong><font color=red>Producer</font></strong></td>
<td><strong>生产者，可以向 Broker topic 发布消息的客户端</strong></td>
</tr>
<tr>
<td><strong><font color=red>Consumer</font></strong></td>
<td><strong>消费者，从 Broker topic 订阅取消息的客户端</strong></td>
</tr>
<tr>
<td><strong><font color=red>Broker</font></strong></td>
<td><strong>Broker 是一个 kafka 实例，简单说就是一台 kafka 服务器，kafkaCluster 表示集群。</strong></td>
</tr>
<tr>
<td><strong><font color=red>Topic</font></strong></td>
<td><strong>主题,Kafka 将消息分门别类，每一类的消息称之为一个主题。可以理解为一个队列，生产者和消费者面向的都是一个 topic</strong></td>
</tr>
<tr>
<td><strong><font color=red>Partition</font></strong></td>
<td><strong>Topic 的分区，每个 Topic 可以有多个分区，同一个 Topic 在不同分区的数据是不重复的，每个 Partition 是一个有序的队列。分区作用是做负载，提高 kafka 的吞吐量。每个 partition 都由一系列有序的、不可变的消息组成，这些消息被连续的追加到 partition 中。partition 中的每个消息都有一个连续递增的序列号叫做 offset，偏移量 offset 在每个分区中是唯一的。</strong></td>
</tr>
<tr>
<td><strong>Offset</strong></td>
<td><strong>生产者 Offset：消息写入的时候，每一个分区都有一个 offset，这个 offset 就是生产者的 offset，同时也是这个分区的最新最大的 offset。 消费者 Offset：某个分区的 offset 情况。例如：生产者写入的 offset 是最新值是 10，当一个 Consumer 开始消费时，从 0 消费，一直消费到了 5，消费者的 offset 为 5。</strong></td>
</tr>
<tr>
<td><strong>Replication</strong></td>
<td><strong>Partition(分区)的副本。每个分区可以有多个 Replication，由一个 Leader 和若干个 Follower 组成。Leader 负责接收生产者 push 的消息和消费者 poll 消费消息。Follower 会实时从自己的 Leader 中同步数据保持同步。Leader 故障时,某个 Follower 会上位为新的 Leader。保证高可用</strong></td>
</tr>
<tr>
<td><strong>Message</strong></td>
<td><strong>kafka 集群存储的消息是以 topic 为类别记录的，每个消息（也叫记录 record）是由</strong></td>
</tr>
<tr>
<td><strong><font color=red>ConsumerGroup(CG)</font></strong></td>
<td><strong>消费者组，由多个 Consumer 组成，每个 ConsumerGroup 中可以有多个 consumer，每个 consumer 属于一个 ConsumerGroup。同一个 Topic 下的某一个分区只能被某个消费者组内的同一个消费者所消费，但可以被多个 consumer group 消费</strong></td>
</tr>
<tr>
<td><strong>In-sync Replicas（ISR）</strong></td>
<td><strong>（ISR）已同步副本：表示存活且副本都已和 Leader 同步的的 broker 集合，是 Leader 所有 replicas 副本的子集。如果某个副本节点宕机，该副本就会从 ISR 集合中剔除。</strong></td>
</tr>
</tbody></table>
<p><strong>Kafka 中的 Broker、Topic、Consumer 都会注册到 zookeeper</strong></p>
<h2 id="6-Events-Streams-Topics"><a href="#6-Events-Streams-Topics" class="headerlink" title="6.Events, Streams, Topics"></a><strong>6.Events, Streams, Topics</strong></h2><table>
<thead>
<tr>
<th align="left"><strong>Event</strong></th>
<th><strong>Event</strong>（事件），代表过去发生的一个事实(比如下了一个购物订单)。简单理解就是一条消息、一条记录，Event 是不可变的，但是很活跃，经常从一个地方流向另一个地方。</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>Stream</strong></td>
<td>事件流表示运动中的相关事件</td>
</tr>
<tr>
<td align="left"><strong>Topic</strong></td>
<td>当一个事件流进入 Kafka 之后，它就成为了一个 <strong>Topic</strong> 主题。所以，Topic 就是具体的事件流，也可以理解为一个 Topic 就是一个静止的 Stream。Topic 把相关的 Event 组织在一起，并且保存。一个 Topic 就像数据库中的一张表。</td>
</tr>
</tbody></table>
<p><img src="/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1728636757271.png" alt="1728636757271"></p>
<h2 id="7-Partition-分区"><a href="#7-Partition-分区" class="headerlink" title="7.Partition 分区"></a><strong>7.Partition 分区</strong></h2><p><strong>Kafka 中 Topic 被分成多个 Partition 分区。Topic 是一个<font color=red>逻辑概念</font>，Partition 是最小的存储单元，掌握着一个 Topic 的部分数据。</strong></p>
<p><img src="/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1728636789696.png" alt="1728636789696"></p>
<p><strong>每个 Partition 都是一个单独的 log 文件，每条记录都以追加的形式写入。</strong></p>
<p><img src="/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1728636808605.png" alt="1728636808605"></p>
<h2 id="8-Offsets（偏移量）和消息的顺序"><a href="#8-Offsets（偏移量）和消息的顺序" class="headerlink" title="8.Offsets（偏移量）和消息的顺序"></a><strong>8.Offsets（偏移量）和消息的顺序</strong></h2><p><strong>Partition 中的每条记录都会被分配一个唯一的序号，称为 <strong>Offset</strong>（偏移量）。Offset 是一个递增的、不可变的数字，由 Kafka 自动维护。当一条记录写入 Partition 的时候，它就被追加到 log 文件的末尾，并被分配一个序号，作为 Offset。</strong></p>
<p><img src="/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1728636828326.png" alt="1728636828326"></p>
<p><strong>如上图，这个 Topic 有 3 个 Partition 分区，向 Topic 发送消息的时候，实际上是被写入某一个 Partition，并赋予 Offset。消息的顺序性需要注意，一个 Topic 如果有多个 Partition 的话，那么从 Topic 这个层面来看，消息是无序的。但单独看 Partition 的话，Partition 内部消息是有序的。所以，一个 Partition 内部消息有序，一个 Topic 跨 Partition 是无序的。如果强制要求 Topic 整体有序，就只能让 Topic 只有一个 Partition。</strong></p>
<p>更进一步，如何指定写入到那个分区？</p>
<p><img src="/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1728636842231.png" alt="1728636842231"></p>
<h2 id="9-Partition-为-Kafka-提供了扩展能力"><a href="#9-Partition-为-Kafka-提供了扩展能力" class="headerlink" title="9. Partition 为 Kafka 提供了扩展能力"></a><strong>9. Partition 为 Kafka 提供了扩展能力</strong></h2><p><strong>一个 Kafka 集群由多个 Broker（就是 Server） 构成，每个 Broker 中含有集群的部分数据。Kafka 把 Topic 的多个 Partition 分布在多个 Broker 中。</strong></p>
<p><img src="/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1728636854878.png" alt="1728636854878"></p>
<table>
<thead>
<tr>
<th>扩容方便</th>
<th>如果把 Topic 的所有 Partition 都放在一个 Broker 上，那么这个 Topic 的可扩展性就大大降低了，会受限于这个 Broker 的 IO 能力。把 Partition 分散开之后，Topic 就可以水平扩展</th>
</tr>
</thead>
<tbody><tr>
<td>防止单点故障</td>
<td>一个 Topic 可以被多个 Consumer 并行消费。如果 Topic 的所有 Partition 都在一个 Broker，那么支持的 Consumer 数量就有限，而分散之后，可以支持更多的 Consumer。</td>
</tr>
<tr>
<td>高并发</td>
<td>一个 Consumer 可以有多个实例，Partition 分布在多个 Broker 的话，Consumer 的多个实例就可以连接不同的 Broker，大大提升了消息处理能力。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试篇-集合</title>
    <url>/posts/2effe69d/</url>
    <content><![CDATA[<h2 id="1-集合"><a href="#1-集合" class="headerlink" title="1.集合"></a>1.集合</h2><h3 id="1-1-Collection"><a href="#1-1-Collection" class="headerlink" title="1.1 Collection"></a>1.1 Collection</h3><h4 id="1-1-1-set：无序、不可重复的集合"><a href="#1-1-1-set：无序、不可重复的集合" class="headerlink" title="1.1.1 set：无序、不可重复的集合"></a>1.1.1 set：无序、不可重复的集合</h4><ul>
<li>TreeSet：基于红黑树实现，支持有序性操作，列如根据一个范围查找元素的操作。</li>
<li>HashSet：基于哈西表实现，支持快速查找，但不支持有序性操作。</li>
<li>LinkedHashSet：具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</li>
</ul>
<h4 id="1-1-2-List：有序、重复的集合"><a href="#1-1-2-List：有序、重复的集合" class="headerlink" title="1.1.2 List：有序、重复的集合"></a>1.1.2 List：有序、重复的集合</h4><ul>
<li>ArrayList：基于动态数组实现，支持随机访问。</li>
<li>ArrayList底层？ 实现了 List 接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入 null 元素，底层通过数组实现。每个 ArrayList 都有一个容器，表示底层数组的实际大小，容器内存储元素的个数不能多于当前的容量。当添加元素且容量不足时会自动增大底层数组的大小.</li>
<li>ArrayList 自动扩容？每当向数组添加元素时，都要去检查一下添加元素后的个数是否会超出当前数组的长度，超出就将数组扩容，以满足添加数据的需求。扩容通过 ensureCapcity 方法实现。</li>
<li>ArrayList的Fail-Fast机制？ArrayList 也采用了快速失败的机制，通过记录 modCount 参数实现。</li>
<li>Vector：和 ArrayList 类似，但它是线程安全的。</li>
<li>LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素，不仅如此，LinkedList 还可以用作栈、队列和双向队列.</li>
</ul>
<h4 id="1-1-3-Queue：一种队列集合实现"><a href="#1-1-3-Queue：一种队列集合实现" class="headerlink" title="1.1.3 Queue：一种队列集合实现"></a>1.1.3 Queue：一种队列集合实现</h4><ul>
<li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列.</li>
</ul>
<h3 id="1-2-Map：具有映射关系的集合"><a href="#1-2-Map：具有映射关系的集合" class="headerlink" title="1.2 Map：具有映射关系的集合"></a>1.2 Map：具有映射关系的集合</h3><ul>
<li>TreeMap：基于红黑树实现。是一个有序的 key-value 集合，</li>
<li>HashMap：1.7 基于哈希表实现，1.8 基于数组+链表+红黑树。存储的是 key-value 类型的数据，其中 key 值不允许重复，key 重复会覆盖，value 运行重复数据存储无序（这里的无序指的是插入顺序和取出顺序是不一致的 key 和 value 都允许为空，但是只能有一个空的 key）。加锁可以保证线程安全。</li>
<li>HashTable：和 HashMap 类似（其实就是加锁了 synchronized 锁），但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConurrentHashMap 的效率会更高。</li>
<li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用顺序。</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java 基础</tag>
      </tags>
  </entry>
</search>
